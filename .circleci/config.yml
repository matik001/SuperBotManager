version: 2.1

orbs:
  windows: circleci/windows@2.2.0

jobs:
  build-frontend:
    description: Build frontend
    docker:
      - image: cimg/node:21.4.0
    steps:
      - checkout
      - restore_cache:
          name: Restore pnpm Package Cache
          keys:
            - pnpm-packages-{{ checksum "SuperBotManagerFrontend/pnpm-lock.yaml" }}
      - run:
          name: Install pnpm package manager
          command: |
            cd SuperBotManagerFrontend
            sudo corepack enable
            sudo corepack prepare pnpm@latest-8 --activate
      - run:
          name: Install Dependencies
          command: |
            cd SuperBotManagerFrontend
            pnpm install
      - save_cache:
          name: Save pnpm Package Cache
          key: pnpm-packages-{{ checksum "SuperBotManagerFrontend/pnpm-lock.yaml" }}
          paths:
            - SuperBotManagerFrontend/node_modules
      - run:
          name: Build react
          command: |
            cd SuperBotManagerFrontend
            pnpm build
      - persist_to_workspace:
          root: SuperBotManagerFrontend
          paths:
            - dist

  build-backend:
    description: Build backend and service with Release configuration
    docker:
        - image: mcr.microsoft.com/dotnet/sdk:8.0
    steps:
      - add_ssh_keys
      - checkout
      - restore_cache:
          keys:
            - dotnet-packages-v1-{{ checksum "SuperBotManagerBackend/SuperBotManagerBackend.csproj" }}
      - run:
          name: "Install project dependencies"
          command: |
            cd SuperBotManagerBackend
            dotnet restore "SuperBotManagerBackend.csproj"
      - save_cache:
          name: Save nugets cache
          key: dotnet-packages-v1-{{ checksum "SuperBotManagerBackend/SuperBotManagerBackend.csproj" }}
          paths:
            - /root/.nuget/packages
      - run:
          name: "Add appsettings.json to backend"
          command: |
            cd SuperBotManagerBackend
            echo $appsettings_backend > appsettings_base64.json
            base64 --decode appsettings_base64.json > appsettings.json
      - run:
          name: "Add appsettings.json to service"
          command: |
            cd SuperbotConsumerService
            echo $appsettings_service > appsettings_base64.json
            base64 --decode appsettings_base64.json > appsettings.json

      - run:
          name: "Build Backend according to some given configuration"
          command: |
            cd SuperBotManagerBackend
            dotnet build "SuperBotManagerBackend.csproj" -c Release

      - run:
          name: "Build Service according to some given configuration"
          command: |
            cd SuperbotConsumerService
            dotnet build "SuperbotConsumerService.csproj" -c Release
      - run:
          name: "Publish backend"
          command: |
            cd SuperBotManagerBackend
            dotnet publish "SuperBotManagerBackend.csproj" -c Release -o ./backend_build /p:UseAppHost=false
      
      - run:
          name: "Publish service"
          command: |
            cd SuperbotConsumerService
            dotnet publish "SuperbotConsumerService.csproj" -c Release -o ./service_build /p:UseAppHost=false

      - persist_to_workspace:
          root: SuperBotManagerBackend
          paths:
            - backend_build

      - persist_to_workspace:
          root: SuperbotConsumerService
          paths:
            - service_build
      
  deploy:
    docker:
      - image: cimg/node:21.4.0
    steps:
      - run: sudo apt update
      - run: sudo apt-get install rsync
      # adds ssh keys from circleci
      - add_ssh_keys
      - attach_workspace:
          at: .
    
      # Stop backend
      - run: > 
          ssh -o StrictHostKeyChecking=no $VPS_USER@$VPS_URL '
            docker rm -f botmanager_backend '
      
      # Stop service
      - run: > 
          ssh -o StrictHostKeyChecking=no $VPS_USER@$VPS_URL '
            docker rm -f botmanager_service '

      # Send frontend
      - run:
          name: Upload frontend
          command: sudo rsync -e "ssh -o StrictHostKeyChecking=no" -arvc --delete --chown=$VPS_USER:$VPS_USER ./dist/ $VPS_USER@$VPS_URL:~/static/botmanager_frontend

      # Send backend
      - run:
          name: Upload backend
          command: sudo rsync -e "ssh -o StrictHostKeyChecking=no" -arvc --delete --chown=$VPS_USER:$VPS_USER ./backend_build/ $VPS_USER@$VPS_URL:~/containers/botmanager_backend

      # Send service
      - run:
          name: Upload Service
          command: sudo rsync -e "ssh -o StrictHostKeyChecking=no" -arvc  --delete --chown=$VPS_USER:$VPS_USER ./service_build/ $VPS_USER@$VPS_URL:~/containers/botmanager_service

      # Start backend
      - run: > 
          ssh -o StrictHostKeyChecking=no $VPS_USER@$VPS_URL '
            docker run --restart=always -v ~/containers/botmanager_backend:/app --name botmanager_backend --network=my_network -d -p 6662:8080 mcr.microsoft.com/dotnet/aspnet:8.0 /bin/bash -c "cd /app ; dotnet SuperBotManagerBackend.dll" '
      
    # Start service
      - run: > 
            ssh -o StrictHostKeyChecking=no $VPS_USER@$VPS_URL '
            docker run --restart=always -v ~/containers/botmanager_service:/app --name botmanager_service --network=my_network -d mcr.microsoft.com/dotnet/runtime:8.0 /bin/bash -c "cd /app ; dotnet SuperbotConsumerService.dll" '
            
workflows:  
  build-and-deploy:
    jobs:
      - build-backend
      - build-frontend
      - deploy:
          requires:
            - build-backend
            - build-frontend